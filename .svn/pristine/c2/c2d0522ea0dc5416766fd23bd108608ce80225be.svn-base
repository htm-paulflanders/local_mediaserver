<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package    local_mediaserver
 * @copyright  2013 Paul Holden (pholden@greenhead.ac.uk)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @id         $Id$
 */

namespace local_mediaserver;

defined('MOODLE_INTERNAL') || die();

/**
 * Base class that defines the interface for media source classes
 *
 */
abstract class media_source extends media_base {

    /** @var string Source URL to match. */
    private $url;

    /**
     * Class constructor
     *
     * @param string $url
     */
    public function __construct($url = null) {
        $this->url = $url;

        parent::__construct();
    }

    /**
     * Return short plugin name of child class
     *
     * @return string
     */
    final public function get_source_type() {
        return $this->subplugin;
    }

    /**
     * Return matching source URL
     *
     * @return string
     */
    final protected function get_url() {
        return $this->url;
    }

    /**
     * Return extracted reference from URL; implement in child classes
     *
     * @return string|boolean false if no reference
     */
    public function get_reference() {
        return false;
    }

    /**
     * Return job for extracted reference; must be implemented in child classes
     * that implement the get_reference method
     *
     * @param stdClass $stream
     * @return string
     *
     * @throws coding_exception
     */
    public function get_job(\stdClass $stream) {
        throw new \coding_exception($this->get_name() . ' media source must implement get_job() method');
    }

    /**
     * Return command with escaped arguments
     *
     * @param string $script
     * @param array $arguments
     * @return string
     */
    public static function safe_job($script, array $arguments) {
        $command = escapeshellcmd($script);
        foreach ($arguments as $key => $value) {
            $command .= " -$key " . escapeshellarg($value);
        }

        return $command;
    }
}
