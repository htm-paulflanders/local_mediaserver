<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package    local_mediaserver
 * @copyright  2013 Paul Holden (pholden@greenhead.ac.uk)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @id         $Id$
 */

defined('MOODLE_INTERNAL') || die();

use \local_mediaserver\external;

global $CFG;
require_once($CFG->dirroot . '/webservice/tests/helpers.php');
require_once($CFG->dirroot . '/files/externallib.php');
require_once($CFG->dirroot . '/local/mediaserver/locallib.php');

/**
 * Unit test for plugin external functions
 *
 * @group greenhead
 * @group local_mediaserver
 */
class local_mediaserver_external_testcase extends externallib_advanced_testcase {

    /** @var stdClass test user. */
    private $user;

    /**
     * Test setup, reset DB and create test user
     *
     * @return void
     */
    protected function setUp() {
        $this->resetAfterTest(true);

        $this->user = $this->getDataGenerator()->create_user();
        $this->context = context_user::instance($this->user->id, MUST_EXIST);

        $this->setUser($this->user);
    }

    /**
     * Test update_series method
     *
     * @return void
     */
    public function test_update_series() {
        global $DB;

        $series = new stdClass;
        $series->userid = $this->user->id;
        $series->category = 1;
        $series->title = 'Something';
        $series->series = 1;
        $series->format = 'Something %episode';
        $series->finished = 0;
        $series->submitted = time();

        $series->id = $DB->insert_record('local_mediaserver_series', $series);

        // Ensure user can update their own series.
        $result = external::clean_returnvalue(external::update_series_returns(),
            external::update_series($series->id, 1)
        );

        $this->assertTrue($result);
        $this->assertEquals(1, $DB->get_field('local_mediaserver_series', 'finished', array('id' => $series->id)));

        // Ensure they can't update other users series.
        $DB->set_field('local_mediaserver_series', 'userid', $this->user->id + 1, array('id' => $series->id));
        try {
            external::update_series($series->id, 0);
            $this->fail('dml_missing_record_exception expected');
        } catch (moodle_exception $ex) {
            $this->assertInstanceOf('dml_missing_record_exception', $ex);
        }

        // Ensure user can update streams of other users with appropriate capability.
        self::assignUserCapability('local/mediaserver:edit', context_system::instance()->id);

        $result = external::clean_returnvalue(external::update_series_returns(),
            external::update_series($series->id, 0)
        );

        $this->assertTrue($result);
        $this->assertEquals(0, $DB->get_field('local_mediaserver_series', 'finished', array('id' => $series->id)));

        // Ensure invalid series can't be updated.
        try {
            external::update_series($series->id + 1, 1);
            $this->fail('dml_missing_record_exception expected');
        } catch (moodle_exception $ex) {
            $this->assertInstanceOf('dml_missing_record_exception', $ex);
        }
    }

    /**
     * Test media_complete & media_update methods
     *
     * @return void
     */
    public function test_media_complete_and_update() {
        global $DB;

        $stream = local_mediaserver_stream_add('url', 'http://initech.com/okthen.mp4', 'Office Space', '', 1, $this->user->id);

        // Create some draft frame files.
        $filerecord = array(
            'contextid' => $this->context->id,
            'component' => 'user',
            'filearea' => 'draft',
            'itemid' => file_get_unused_draft_itemid(),
            'filepath' => '/',
        );

        $fs = get_file_storage();

        for ($i = 1; $i <= 2; $i++) {
            $frame = __DIR__ . '/fixtures/f' . $i . '.png';
            $filerecord['filename'] = basename($frame);
            $fs->create_file_from_pathname($filerecord, $frame);
        }

        // Catch triggered events.
        $sink = $this->redirectEvents();

        $result = external::clean_returnvalue(external::media_complete_returns(),
            external::media_complete($stream->code, $filerecord['itemid'])
        );

        $events = $sink->get_events();
        $event = reset($events);
        $sink->close();

        $this->assertInstanceOf('\local_mediaserver\event\media_completed', $event);
        $this->assertEquals($stream->id, $event->objectid);
        $this->assertEquals($this->user->id, $event->relateduserid);

        $this->assertTrue($result);
        $this->assertEquals(1, $DB->get_field('local_mediaserver_stream', 'done', array('id' => $stream->id)));

        // Let's see if frames were saved correctly.
        $frames = $fs->get_area_files(context_system::instance()->id, 'local_mediaserver', 'frame', $stream->id, 'filename', false);
        $this->assertCount(2, $frames);

        $frame = array_shift($frames);
        $this->assertEquals('f1.png', $frame->get_filename());

        $frame = array_shift($frames);
        $this->assertEquals('f2.png', $frame->get_filename());

        // Let's update the frames (we'll need a new draft area).
        $filerecord['itemid'] = file_get_unused_draft_itemid();

        for ($i = 1; $i <= 2; $i++) {
            $filerecord['filename'] = 'f' . $i . '.png';
            $fs->create_file_from_string($filerecord, 'Frame ' . $i);
        }

        $result = external::clean_returnvalue(external::media_update_returns(),
            external::media_update($stream->code, $filerecord['itemid'])
        );

        $this->assertTrue($result);
    }

    /**
     * Test media_complete method with invalid frames
     *
     * @return void
     */
    public function test_media_complete_invalid_frames() {
        global $DB;

        $stream = local_mediaserver_stream_add('youtube', 'Fy3rjQGc6lA', 'Office Space', '', 1, $this->user->id);

        // Create some invalid draft frame files.
        $draft = core_files_external::upload($this->context->id, 'user', 'draft', 0, '/', 'f1.png', 'I\'m a little teapot', null, null);
        $draft = external_api::clean_returnvalue(core_files_external::upload_returns(), $draft);

        $draftid = $draft['itemid'];

        try {
            external::media_complete($stream->code, $draftid);
            $this->fail('invalid_parameter_exception expected');
        } catch (moodle_exception $ex) {
            $this->assertInstanceOf('invalid_parameter_exception', $ex);
            $this->assertContains('draft area invalid file count', $ex->getMessage());
        }

        // Add another (invalid) file to the same user draft filearea.
        core_files_external::upload($this->context->id, 'user', 'draft', $draftid, '/', 'nowai.jpg', 'No wai!', null, null);

        try {
            external::media_complete($stream->code, $draftid);
            $this->fail('invalid_parameter_exception expected');
        } catch (moodle_exception $ex) {
            $this->assertInstanceOf('invalid_parameter_exception', $ex);
            $this->assertContains('draft area invalid file names', $ex->getMessage());
        }
    }
}
