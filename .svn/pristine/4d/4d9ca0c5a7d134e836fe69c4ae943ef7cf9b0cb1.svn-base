<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package    local_mediaserver
 * @copyright  2013 Paul Holden (pholden@greenhead.ac.uk)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @id         $Id$
 */

defined('MOODLE_INTERNAL') || die();

require_once($CFG->dirroot . '/local/mediaserver/locallib.php');

class local_mediaserver_guide_renderer extends plugin_renderer_base {
    /** @const BLOCK_REGION Block region on page. */
    const BLOCK_REGION = BLOCK_POS_RIGHT;

    /** @const HOURPIXELS        Width in pixels of an hour. */
    const HOURPIXELS      = 180;
    /** @const OFFSETLEFTPIXELS  Offset program left to account for channel icon. */
    const OFFSETLEFTPIXELS = 50;
    /** @const OFFSETWIDTHPIXELS Offset program width to account for element padding plus border. */
    const OFFSETWIDTHPIXELS = 9;

    /**
     * Add a block region to the page
     *
     * @return void
     */
    public function add_block_region() {
        global $PAGE;

        $PAGE->blocks->add_region(self::BLOCK_REGION);
    }

    /**
     * Add fake block to the page
     *
     * @param block_contents $block
     * @return void
     */
    public function add_block(block_contents $block) {
        global $PAGE;

        // Auto-populate the $block id attribute.
        $blockclass = explode('\\', get_class($block));
        $block->attributes['id'] = 'block_fake_' . $blockclass[2];

        $PAGE->blocks->add_fake_block($block, self::BLOCK_REGION);
    }

    /**
     * Get the HTML for blocks in the block region
     *
     * @return string
     */
    public function output_blocks() {
        global $OUTPUT;

        return $OUTPUT->blocks(self::BLOCK_REGION, 'row-fluid span3');
    }

    /**
     * Return opening tags to begin the main page region
     *
     * @return string
     */
    public function start_main_region() {
        return html_writer::start_tag('div', array('id' => 'guide-region-main', 'class' => 'span9 no-overflow'));
    }

    /**
     * Return HTML content to print channel programs in grid form
     *
     * @param int $timebegin
     * @return string
     */
    public function output_times($timebegin) {
        global $PAGE;

        $link = clone($PAGE->url);

        // The current range of time we're looking at.
        $rangebegin = local_mediaserver_time_round($timebegin);
        $range = range($rangebegin, $rangebegin + (HOURSECS * 3), HOURSECS);

        // Loop through each hour, starting from beginning of day.
        $hourbegin = local_mediaserver_time_round($rangebegin, true);
        for ($hour = 0; $hour < 24; $hour++, $hourbegin += HOURSECS) {
            $link->param('t', $hourbegin);

            $hourlabel = local_mediaserver_local_time($hourbegin, '%H');
            $class = (in_array($hourbegin, $range) ? 'hour-selected' : '');

            $list[] = html_writer::link($link, $hourlabel, array('class' => $class));
        }

        return html_writer::alist($list, array('class' => 'small-text guide-row guide-time'));
    }

    /**
     * Return HTML content to print channel programs in grid form
     *
     * @param stdClass $channel
     * @param array $programs
     * @param int $timebegin
     * @param int $timeend
     * @return string
     */
    public function output_channel_programs(stdClass $channel, array $programs, $timebegin, $timeend) {
        $now = time();
        $strtimeformat = get_string('strftimetime', 'langconfig');

        $output = html_writer::start_tag('ul', array('class' => 'guide-row guide-channel'));

        $link = new local_mediaserver_url('/local/mediaserver/guide/channel.php', array('id' => $channel->id, 't' => $timebegin));
        $iconlink = html_writer::link($link, local_mediaserver_channel_icon($channel));

        $output .= html_writer::tag('li', $iconlink, array('class' => 'icon'));

        foreach ($programs as $program) {
            // Make sure program start/end times fall within range.
            $programbegin = max($program->timebegin, $timebegin);
            $programend   = min($program->timeend, $timeend);

            // Program begin is in seconds; first calculate $starthour, then multiply by HOURPIXELS.
            $starthours = ($programbegin - $timebegin) / HOURSECS;
            $left = floor($starthours * self::HOURPIXELS) + self::OFFSETLEFTPIXELS;

            // Duration is in seconds; first calculate $durationhour, then multiply by HOURPIXELS.
            $durationhours = ($programend - $programbegin) / HOURSECS;
            $width = floor($durationhours * self::HOURPIXELS) - self::OFFSETWIDTHPIXELS;

            // Store program classes (i.e. tiny, old, recorded, favourite, etc).
            $classes = array('small-text');

            if ($program->timebegin < ($now + LOCAL_MEDIASERVER_RECORD_BUFFER)) {
                $classes[] = 'program-old';
            }

            if ($program->stream) {
                $classes[] = 'program-recorded';
            } else if ($program->favourite) {
                $classes[] = 'program-favourite';
            } else if ($program->serieslink) {
                $classes[] = 'program-series';
            }

            // Workaround for programs with a negative width, remove element padding.
            if ($width < 0) {
                $width += 8;
                $classes[] = 'program-tiny';
            }

            $link->param('t', $program->timebegin);
            $link->set_anchor('p' . $program->id);

            $strtime = local_mediaserver_local_time($program->timebegin, $strtimeformat);
            $strtime .= ' (' . format_time($program->timeend - $program->timebegin) . ')';

            $data = json_encode(array('time' => $strtime, 'description' => shorten_text($program->description, 440, false, '&hellip;')));
            $content = html_writer::link($link, $program->title, array('data-program' => $data));

            $style = sprintf('left: %dpx; width: %dpx;', $left, $width);

            $output .= html_writer::tag('li', $content, array('style' => $style, 'class' => implode(' ', $classes)));
        }

        $output .= html_writer::end_tag('ul');

        return $output;
    }

    /**
     * Highlights search terms in a string
     *
     * @param string $content
     * @param string $search
     * @return string
     */
    private function highlight_search($content, $search) {
        return highlight($search, $content, false);
    }

    /**
     * Return help popup for a program
     *
     * @see core_renderer::render_help_icon
     *
     * @param string $string
     * @param int $programid
     * @return string
     */
    private function get_program_popup($text, $programid) {
        global $OUTPUT;

        $link = new local_mediaserver_url('/local/mediaserver/guide/popup.php', array('id' => $programid));
        $icon = new pix_icon('help', get_string('help'), 'core', array('class' => 'iconhelp'));

        $popup = $OUTPUT->action_icon($link, $icon, null, array('aria-haspopup' => 'true', 'target' => '_blank'));

        return html_writer::tag('span', $text . $popup, array('class' => 'helptooltip'));
    }

    /**
     * Return array of actions user can perform on a program
     *
     * @param stdClass $program
     * @return array
     */
    public function get_program_actions(stdClass $program) {
        global $PAGE, $OUTPUT, $DB;

        $context = context_system::instance();

        $returnurl = $PAGE->url->out_as_local_url(false);
        $buttons = array();

        // Record program.
        if (has_capability('local/mediaserver:add', $context)) {
            // Program must start after this time if we are to schedule/cancel recording.
            $recordingwindow = time() + LOCAL_MEDIASERVER_RECORD_BUFFER;
            // Flag whether we add a recording button.
            $recordingbutton = false;
            // Program can be series linked if it has series information, and isn't already linked.
            $serieslinkable = (! $program->serieslink && local_mediaserver_program_has_series($program));

            if ($program->timebegin > $recordingwindow) {
                // Already scheduled, allow user to cancel their own recordings (users with 'edit' capability can cancel any).
                if ($program->stream) {
                    $stream = $DB->get_record('local_mediaserver_stream', array('id' => $program->stream), '*', MUST_EXIST);

                    if (local_mediaserver_user_can_edit($stream)) {
                        $cancel = new local_mediaserver_url('/local/mediaserver/guide/record.php', array(
                            'id' => $program->id, 'returnurl' => $returnurl, 'unschedule' => 1
                        ));

                        $buttons[] = $OUTPUT->single_button($cancel, get_string('cancel'));
                    }
                } else if ($recordingbutton = (local_mediaserver_program_tuner($program) !== false)) {
                    $record = new local_mediaserver_url('/local/mediaserver/guide/record.php', array(
                        'id' => $program->id, 'returnurl' => $returnurl,
                    ));

                    $buttons[] = $OUTPUT->single_button($record, get_string('record', 'local_mediaserver'));
                }
            }

            if (! $recordingbutton && $serieslinkable) {
                $series = new local_mediaserver_url('/local/mediaserver/guide/series.php', array(
                    'id' => $program->id, 'returnurl' => $returnurl,
                ));

                $buttons[] = $OUTPUT->single_button($series, get_string('recordseries', 'local_mediaserver'));
            }
        }

        // Add program to favourites.
        if (! $program->favourite) {
            $favourite = new local_mediaserver_url('/local/mediaserver/guide/favourite.php', array(
                'id' => $program->id, 'returnurl' => $returnurl,
            ));

            $buttons[] = $OUTPUT->single_button($favourite, get_string('favourite', 'local_mediaserver'));
        }

        // Find more programs with same title.
        if (str_word_count($program->title) == 1) {
            $searchstr = 'title:' . $program->title;
        } else {
            $searchstr = '"' . $program->title . '"';
        }

        $search = local_mediaserver_guide_search_url(array('search' => $searchstr));
        $buttons[] = $OUTPUT->single_button($search, get_string('search'));

        return $buttons;
    }

    /**
     * Return HTML content to print individual program
     *
     * @param stdClass $program
     * @param int $time to use for link back to channel
     * @param string $searchterms Search pattern to match
     * @return string
     */
    public function output_program(stdClass $program, $time, $searchterms = '') {
        global $DB;

        $channel = $DB->get_field('local_mediaserver_channel', 'name', array('id' => $program->channel), MUST_EXIST);
        $channelurl = new local_mediaserver_url('/local/mediaserver/guide/channel.php', array('id' => $program->channel, 't' => $time), 'p' . $program->id);

        $strdate = local_mediaserver_local_time($program->timebegin);
        $strdate .= ' (' . format_time($program->timeend - $program->timebegin) . ')';

        // Store program classes (i.e. tiny, old, recorded, favourite, etc).
        $classes = array('small-text', 'program');

        if ($program->timebegin < (time() + LOCAL_MEDIASERVER_RECORD_BUFFER)) {
            $classes[] = 'program-old';
        }

        // Icon link is for storing a completed stream frame, popups are for showing recording user or clash information.
        $iconlink = $popuphelp = '';

        if ($program->stream) {
            $classes[] = 'program-recorded';

            // Check if program stream is complete.
            if ($stream = $DB->get_record('local_mediaserver_stream', array('id' => $program->stream, 'done' => 1))) {
                $link = local_mediaserver_stream_url($stream);
                $iconlink = html_writer::link($link, local_mediaserver_stream_image($stream, 'f2'));
            } else {
                $popuptext = get_string('programscheduled', 'local_mediaserver');
                $popuphelp = $this->get_program_popup($popuptext, $program->id);
            }
        } else if ($program->favourite) {
            $classes[] = 'program-favourite';
        } else if ($program->serieslink) {
            $classes[] = 'program-series';
        }

        $title = $this->highlight_search($program->title, $searchterms);

        $output  = html_writer::start_tag('div', array('class' => implode(' ', $classes)));
        $output .= html_writer::tag('div', $title, array('id' => 'p' . $program->id, 'class' => 'title'));

        $output .= $iconlink;

        $list = array(
            get_string('channel', 'local_mediaserver') . ': ' . html_writer::link($channelurl, $channel),
            get_string('date') . ': ' . $strdate,
            get_string('genre', 'local_mediaserver') . ': ' . $program->genre,
        );

        $output .= html_writer::alist($list, array('class' => 'program-info'));

        // Generate series information text.
        if ($program->episodetitle) {
            $program->episodetitle = $this->highlight_search($program->episodetitle, $searchterms);
        }
        if ($strseries = local_mediaserver_series_information($program)) {
            $output .= html_writer::tag('div', $strseries, array('class' => 'series'));
        }

        $description = $this->highlight_search($program->description, $searchterms);

        $output .= html_writer::tag('div', format_text($description, FORMAT_MOODLE, array('para' => false)),
            array('class' => 'program-description'));

        if ($popuphelp) {
            $output .= html_writer::tag('div', $popuphelp, array('class' => 'program-popup program-actions'));
        }

        // Program action buttons (record, favourite, etc).
        if ($buttons = $this->get_program_actions($program)) {
            $output .= html_writer::alist($buttons, array('class' => 'program-actions'));
        }

        $output .= html_writer::end_tag('div');

        return $output;
    }

    /**
     * Close the main page region
     *
     * @return string
     */
    public function end_main_region() {
        return html_writer::end_tag('div');
    }

}
