<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package    local_mediaserver
 * @copyright  2013 Paul Holden (pholden@greenhead.ac.uk)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @id         $Id$
 */

require(dirname(dirname(dirname(dirname(__FILE__)))) . '/config.php');
require_once($CFG->libdir . '/tablelib.php');
require_once($CFG->dirroot . '/local/mediaserver/lib.php');
require_once($CFG->dirroot . '/local/mediaserver/locallib.php');

$id = optional_param('id', 0, PARAM_INT);
$finished = optional_param('finished', 0, PARAM_BOOL);

$context = context_system::instance();

require_login(SITEID, false);
require_capability('local/mediaserver:add', $context);

$strseries = get_string('recordseries', 'local_mediaserver');
$strtitle = get_string('sourceepg', 'local_mediaserver') . ': ' . $strseries;

$PAGE->set_context($context);
$PAGE->set_pagelayout('standard');
$PAGE->set_url(new local_mediaserver_url('/local/mediaserver/guide/links.php'));
$PAGE->set_title($strtitle);

// Normal users can only see their own series links.
$viewallseries = has_capability('moodle/site:config', $context);

if ($id > 0) {
    require_sesskey();

    $params = array('id' => $id);

    if (! $viewallseries) {
        $params['userid'] = $USER->id;
    }

    $DB->set_field('local_mediaserver_series', 'finished', $finished, $params);

    redirect($PAGE->url);
}

echo $OUTPUT->header();
echo $OUTPUT->heading_with_help($strseries, 'recordseriesdetailed', 'local_mediaserver', '', '', 3);

$headers = get_strings(array('programtitle', 'series', 'episodes', 'episodelast'), 'local_mediaserver');

$table = new flexible_table('local_mediaserver');
$table->define_columns(array('toggle', 'title', 'user', 'series', 'episodes', 'episodelast'));
$table->define_headers(array(null, $headers->programtitle, get_string('user'), $headers->series, $headers->episodes, $headers->episodelast));
$table->define_baseurl($PAGE->url);
$table->attributes['class'] = 'flexible table-programs';
$table->setup();

$where = '1=1';
$params = null;

if (! $viewallseries) {
    $where .= ' AND userid = :userid';
    $params['userid'] = $USER->id;
}

$userfields = get_all_user_name_fields(true, 'u');

$sql = 'SELECT s.*, ' . $userfields . '
          FROM {local_mediaserver_series} s
          JOIN {user} u ON u.id = s.userid
         WHERE ' . $where . '
      ORDER BY s.title';

$serieslinks = $DB->get_records_sql($sql, $params);
foreach ($serieslinks as $link) {
    $episodes = local_mediaserver_series_recordings($link->title, $link->series);

    // Populate each series episodecount & episodelast fields.
    if ($link->episodecount = count($episodes)) {
        $episode = end($episodes);

        $link->episodelast = $episode->timebegin;
    } else {
        $link->episodelast = 0;
    }
}

// Re-sort the series links by the date of their last recorded episode.
core_collator::asort_objects_by_property($serieslinks, 'episodelast', core_collator::SORT_NUMERIC);
$serieslinks = array_reverse($serieslinks);

foreach ($serieslinks as $link) {
    if ($link->finished) {
        $iconfile = 't/show';
        $icontext = get_string('enable');
        $rowclass = 'dimmed_text';
    } else {
        $iconfile = 't/hide';
        $icontext = get_string('disable');
        $rowclass = '';
    }

    $toggle = clone($PAGE->url);
    $toggle->params(array('id' => $link->id, 'finished' => (int)!$link->finished, 'sesskey' => sesskey()));

    $icon = $OUTPUT->action_icon($toggle, new pix_icon($iconfile, $icontext, 'core', array('class' => 'iconsmall')));

    $userlink = html_writer::link(new moodle_url('/user/profile.php', array('id' => $link->userid)), fullname($link));

    if ($link->episodelast > 0) {
        $dateformat = get_string('strftimedatetime', 'langconfig');
        $episodelast = local_mediaserver_program_time($link->episodelast, $dateformat);
    } else {
        $episodelast = get_string('never');
    }

    $table->add_data(array($icon, s($link->title), $userlink, $link->series, $link->episodecount, $episodelast), $rowclass);
}

$table->print_html();

echo $OUTPUT->footer();
