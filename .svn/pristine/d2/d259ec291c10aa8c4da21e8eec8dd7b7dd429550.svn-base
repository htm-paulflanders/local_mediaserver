<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package    local_mediaserver
 * @copyright  2013 Paul Holden (pholden@greenhead.ac.uk)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @id         $Id$
 */

require(dirname(dirname(dirname(dirname(__FILE__)))) . '/config.php');
require_once($CFG->dirroot . '/local/mediaserver/lib.php');
require_once($CFG->dirroot . '/local/mediaserver/locallib.php');

$id = required_param('id', PARAM_INT);
$returnurl = required_param('returnurl', PARAM_LOCALURL);
$single = optional_param('single', 0, PARAM_BOOL); // No series link.
$unschedule = optional_param('unschedule', 0, PARAM_BOOL);
$confirm = optional_param('confirm', 0, PARAM_BOOL);

$context = context_system::instance();

require_login(SITEID, false);
require_capability('local/mediaserver:add', $context);

$program = $DB->get_record('local_mediaserver_program', array('id' => $id), '*', MUST_EXIST);

$guide = new local_mediaserver_url('/local/mediaserver/guide/index.php');

$strrecord = get_string('record', 'local_mediaserver');
$strtitle = get_string('sourceepg', 'local_mediaserver') . ': ' . $strrecord;

$PAGE->set_context($context);
$PAGE->set_pagelayout('admin');
$PAGE->set_url(new local_mediaserver_url('/local/mediaserver/guide/record.php', array('id' => $program->id, 'returnurl' => $returnurl)));
$PAGE->set_title($strtitle);

navigation_node::override_active_url($guide);

// This is the URL user is sent to after confirming action (record, cancel, etc).
$return = new moodle_url($returnurl, null, 'p' . $program->id);

// Cancel recording.
if ($unschedule) {
    $recording = $DB->get_record('local_mediaserver_recording', array('program' => $program->id), '*', MUST_EXIST);
    $stream    = $DB->get_record('local_mediaserver_stream', array('id' => $recording->stream), '*', MUST_EXIST);

    $strcancel = get_string('recordcancel', 'local_mediaserver');
    if (! local_mediaserver_user_can_edit($stream)) {
        print_error('nopermissions', 'error', null, $strcancel);
    }

    if ($program->timebegin < (time() + LOCAL_MEDIASERVER_RECORD_BUFFER)) {
        print_error('errorprogramexpired', 'local_mediaserver', $guide);
    }

    if ($confirm) {
        require_sesskey();

        if (! local_mediaserver_program_cancel($recording, $stream->code)) {
            throw new moodle_exception('errorcreatingjob', 'local_mediaserver');
        }

        redirect($return);
    }

    $PAGE->navbar->add(get_string('cancel'));

    echo $OUTPUT->header();
    echo $OUTPUT->heading($strcancel, 3);

    $confirm = clone($PAGE->url);
    $confirm->params(array('unschedule' => 1, 'confirm' => 1));

    echo $OUTPUT->confirm(get_string('recordcancel_confirm', 'local_mediaserver'), $confirm, $return);

    echo $OUTPUT->footer();
    die;
}

$PAGE->navbar->add($strrecord);

// Ask user if they want to series link the program.
$serieslinkprompt = (local_mediaserver_program_has_series($program) && !$single);
if ($serieslinkprompt) {
    // Now check it isn't already series linked.
    $serieslinkprompt = (! $DB->record_exists('local_mediaserver_series', array('title' => $program->title, 'series' => $program->series)));
}

if ($serieslinkprompt) {
    echo $OUTPUT->header();

    $a = new stdClass;
    $a->title = $program->title;
    $a->series = $program->series;

    $heading = get_string('recordseries_extended', 'local_mediaserver', $a);
    echo $OUTPUT->heading_with_help($heading, 'recordseries', 'local_mediaserver', '', '', 3);

    $serieslink = new local_mediaserver_url('/local/mediaserver/guide/series.php', array('id' => $program->id, 'returnurl' => $returnurl));
    $confirm = new single_button($serieslink, get_string('yes'));

    $singleprogram = $PAGE->url;
    $singleprogram->param('single', 1);
    $cancel = new single_button($singleprogram, get_string('no'));

    echo $OUTPUT->confirm(get_string('recordseries_confirm', 'local_mediaserver', $a), $confirm, $cancel);

    echo $OUTPUT->footer();
    die;
}

// Don't record the same program multiple times.
if ($DB->record_exists('local_mediaserver_recording', array('program' => $program->id))) {
    print_error('errorrecordingexists', 'local_mediaserver', $guide);
}

// Don't record the same program series/episode multiple times.
if (local_mediaserver_program_has_series($program)) {
    $sql = 'SELECT p.*
              FROM {local_mediaserver_program} p
              JOIN {local_mediaserver_recording} r ON r.program = p.id
             WHERE p.title = :title AND p.series = :series AND p.episode = :episode';

    if ($existing = $DB->get_record_sql($sql, array('title' => $program->title, 'series' => $program->series, 'episode' => $program->episode))) {
        $link = new local_mediaserver_url('/local/mediaserver/guide/channel.php', array(
            'id' => $existing->channel,
            't' => $existing->timebegin,
        ), 'p' . $existing->id);

        redirect($link, get_string('errorrecordingexists', 'local_mediaserver'));
    }
}

$mform = new \local_mediaserver\form\media_record(null, array($program, $returnurl));

if ($mform->is_cancelled()) {
    redirect($return);
} else if ($data = $mform->get_data()) {
    $tuner = local_mediaserver_program_tuner($program);
    $category = $data->category;
    $title = $data->title;
    $description = $data->description;

    if (! local_mediaserver_program_record($program, $tuner, $category, $title, $description)) {
        throw new moodle_exception('errorcreatingjob', 'local_mediaserver');
    }

    redirect($return, get_string('changessaved'));
}

echo $OUTPUT->header();

$mform->display();

echo $OUTPUT->footer();
