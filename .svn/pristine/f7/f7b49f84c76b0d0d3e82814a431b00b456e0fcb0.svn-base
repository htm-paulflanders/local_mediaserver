<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package    local_mediaserver
 * @copyright  2013 Paul Holden (pholden@greenhead.ac.uk)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @id         $Id$
 */

namespace local_mediaserver\form;

defined('MOODLE_INTERNAL') || die();

require_once($CFG->libdir . '/formslib.php');

class series extends \moodleform {

    /**
     * Form definition
     *
     * @return void
     */
    public function definition() {
        $mform = $this->_form;

        list($program, $returnurl) = $this->_customdata;

        $a = new \stdClass;
        $a->title = $program->title;
        $a->series = $program->series;

        $heading = get_string('recordseries_extended', 'local_mediaserver', $a);
        $mform->addElement('header', 'seriesinfo', $heading);

        $mform->addElement('hidden', 'id');
        $mform->setType('id', PARAM_INT);

        $mform->addElement('hidden', 'returnurl');
        $mform->setType('returnurl', PARAM_LOCALURL);

        $mform->addElement('text', 'format', get_string('recordseriesformat', 'local_mediaserver'), array('maxlength' => 100));
        $mform->addHelpButton('format', 'recordseriesformat', 'local_mediaserver');
        $mform->addRule('format', get_string('required'), 'required');
        $mform->addRule('format', get_string('maximumchars', '', 100), 'maxlength', 100);
        $mform->setType('format', PARAM_TEXT);

        $options = array(0 => get_string('choosedots'));
        $options += local_mediaserver_root_categories();

        $mform->addElement('select', 'category', get_string('category', 'local_mediaserver'), $options);
        $mform->addRule('category', get_string('required'), 'required');
        $mform->setType('category', PARAM_INT);

        $mform->setExpanded('seriesinfo');

        $this->add_action_buttons(true);

        $formatdefault = ($program->episodetitle ? '%title: %episode. %episodetitle' : '%title: Part %episode');
        $this->set_data(array('id' => $program->id, 'returnurl' => $returnurl, 'format' => $formatdefault));
    }

    /**
     * Form validation
     *
     * @param array $data raw form data
     * @param array $files
     * @return array of errors
     */
    public function validation($data, $files) {
        $errors = parent::validation($data, $files);

        list($program, $returnurl) = $this->_customdata;

        // Category must be selected.
        if ($data['category'] == 0) {
            $errors['category'] = get_string('required');
        }

        // Program must have series information.
        if (! local_mediaserver_program_has_series($program)) {
            $errors['format'] = get_string('errornoserieslink', 'local_mediaserver');
        } else {
            // Ensure series title format is valid.
            if (local_mediaserver_program_format_extract($program, $data['format']) === false) {
                $errors['format'] = get_string('invalidparameter', 'debug');
            }
        }

        return $errors;
    }
}
