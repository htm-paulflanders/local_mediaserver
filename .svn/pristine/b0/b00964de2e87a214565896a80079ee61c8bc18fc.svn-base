<?php
// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package    local_mediaserver
 * @copyright  2013 Paul Holden (pholden@greenhead.ac.uk)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @id         $Id$
 */

defined('MOODLE_INTERNAL') || die();

use local_mediaserver\phpunit\schedule_download_testcase,
    mediaschedule_direct\definition;

/**
 * Unit test for Schedules Direct schedule download methods
 *
 * @group greenhead
 * @group local_mediaserver
 */
class mediaschedule_direct_download_testcase extends schedule_download_testcase {

    /**
     * Tests schedule download method using fixtures data
     *
     * @return void
     */
    public function test_download() {
        $schedule = __DIR__ . '/fixtures/17155.json';
        $schedulejson = json_decode(file_get_contents($schedule), true);

        $programs = __DIR__ . '/fixtures/programs.json';
        $programsjson = json_decode(file_get_contents($programs), true);

        // Create schedule class mocking each of the request methods.
        $schedule = $this->mockScheduleInstance(definition::class, array(
            'request_schedule' => $schedulejson,
            'request_programs' => $programsjson,
        ));

        // The schedule fixture contains a whole day listings, so needs to be filtered for $start/$finish time.
        $start = 1465578000; // 10/06/16 18:00 BST.
        $schedule->download(null, $start, $start + (HOURSECS * 6));

        $programs = $this->getSchedulePrograms($schedule);
        $this->assertCount(7, $programs);

        $expected = array(
            1465578000 => ['The Simpsons', 23, 22, 'Lisa Goes Gaga'],
            1465579800 => ['Hollyoaks', 0, 0, ''],
            1465581600 => ['Channel 4 News', 0, 0, ''],
            1465583400 => ['Eating Well with Hemsley & Hemsley', 1, 5, ''],
            1465585200 => ['Grand Designs', 15, 6, ''],
            1465588800 => ['Gogglebox', 7, 17, ''],
            1465592400 => ['The Last Leg', 8, 1, ''],
        );

        foreach ($expected as $timebegin => list($title, $series, $episode, $episodetitle)) {
            $program = array_shift($programs);

            $this->assertEquals($timebegin, $program->timebegin);
            $this->assertEquals($title, $program->title);
            $this->assertEquals($series, $program->series);
            $this->assertEquals($episode, $program->episode);
            $this->assertEquals($episodetitle, $program->episodetitle);
        }
    }

    /**
     * Tests schedule download method series information extraction using fixtures data
     *
     * @return void
     */
    public function test_download_series_information() {
        $schedule = __DIR__ . '/fixtures/17155.json';
        $programs = __DIR__ . '/fixtures/programs_series.json';

        // Create schedule class mocking each of the request methods.
        $schedule = $this->mockScheduleInstance(definition::class, array(
            'request_schedule' => json_decode(file_get_contents($schedule), true),
            'request_programs' => json_decode(file_get_contents($programs), true),
        ));

        // The schedule fixture contains a whole day listings, so needs to be filtered for $start/$finish time.
        $start = 1465574400; // 10/06/16 17:00 BST.
        $schedule->download(null, $start, $start + (HOURSECS * 7));

        $programs = $this->getSchedulePrograms($schedule);
        $this->assertCount(9, $programs);

        // Only interested in series, episode, episodetitle.
        $expected = array(
            1465574400 => [1, 3, ''],
            1465576200 => [2, 10, ''],
            1465578000 => [0, 0, 'Something'],
            1465579800 => [1, 2, 'Something'],
            1465581600 => [1, 3, ''],
            1465583400 => [2, 10, ''],
            1465585200 => [1, 5, ''],
            1465588800 => [1, 1, ''],
            1465592400 => [0, 0, 'Episode Something'],
        );

        foreach ($expected as $timebegin => $expectedseries) {
            $program = array_shift($programs);

            $this->assertEquals($expectedseries, [$program->series, $program->episode, $program->episodetitle], $timebegin);
        }
    }

    /**
     * Data provider for test_schedule_dates
     *
     * @return array
     */
    public function schedule_dates_provider() {
        $start = 1465473600; // 09/06/16 13:00 BST.

        return array(
            array($start, $start + HOURSECS, array('2016-06-09')),
            array($start, $start + (HOURSECS * 16), array('2016-06-09', '2016-06-10')),
            array($start, $start + DAYSECS, array('2016-06-09', '2016-06-10')),
            array($start, $start + (DAYSECS * 4), array('2016-06-09', '2016-06-10', '2016-06-11', '2016-06-12', '2016-06-13')),
        );
    }

    /**
     * Tests class schedule_dates private method via Reflection
     *
     * @param int $start
     * @param int $finish
     * @param array $expected
     * @return void
     *
     * @dataProvider schedule_dates_provider
     */
    public function test_schedule_dates($start, $finish, array $expected) {
        $method = new \ReflectionMethod(definition::class, 'schedule_dates');
        $method->setAccessible(true);

        $this->assertEquals($expected, $method->invokeArgs(new definition, array($start, $finish)));
    }
}
