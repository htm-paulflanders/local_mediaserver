// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * @package    local_mediaserver
 * @copyright  2013 Paul Holden (pholden@greenhead.ac.uk)
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 * @id         $Id$
 */

M.local_mediaserver = M.local_mediaserver || {};

var GUIDE_NAME = 'Guide',
    GUIDE_SELECTOR = '.guide-channel li:not(.icon) a',
    GUIDE;

GUIDE = function() {
    GUIDE.superclass.constructor.apply(this, arguments);
};

Y.extend(GUIDE, Y.Base, {
    /** Element selectors. */
    SELECTORS: {
        POPUP: 'program-hover'
    },

    /** Element classes. */
    CSS: {
        POPUP: 'small-text'
    },

    /** The hover popup element. */
    popup: null,

    /** The hover popup leave timer. */
    timer: null,

    /** Initialize media guide UI. */
    initializer: function() {
        var body = Y.one('body');

        this.popup = body.one('#' + this.SELECTORS.POPUP);
        if (! this.popup) {
            this.popup = Y.Node.create('<div />').setAttrs({
                'id': this.SELECTORS.POPUP,
                'hidden': 'hidden'
            }).addClass(this.CSS.POPUP);

            this.popup.on('mouseleave', this.leave, this);

            body.append(this.popup);
        }

        body.delegate('hover', this.hover, this.leave, this.get('selector'), this);
    },

    /**
     * Event handler for program hover.
     *
     * @param {EventFacade} event
     */
    hover: function(event) {
        var element = event.target,
            coordinates = element.getXY(),
            program = Y.JSON.parse(element.getData('program'));

        // Cancel the popup hide timer if we've started it.
        if (! Y.Lang.isNull(this.timer)) {
            this.timer.cancel();
        }

        this.popup.setStyle('left', (parseInt(coordinates[0], 10) + 10) + 'px');
        this.popup.setStyle('top',  (parseInt(coordinates[1], 10) + 16) + 'px');
        this.popup.setContent(program.time + '<br />' + program.description);

        this.popup.show();
    },

    /**
     * Event handler for program leave.
     *
     * @param {EventFacade} event
     */
    leave: function(event) {
        var coordinates = [event.pageX, event.pageY],
            region = this.popup.get('region');

        // Don't hide popup if event coodinates intersect it's region.
        if (coordinates[0] >= region.left && coordinates[0] <= region.right &&
                coordinates[1] >= region.top && coordinates[1] <= region.bottom) {

            return;
        }

        // Create timer to hide the popup lafter a short delay.
        this.timer = Y.later(300, this, function() {
            return this.popup.hide();
        });
    }
}, {
    NAME: GUIDE_NAME,
    ATTRS: {
        selector: {
            validator: Y.Lang.isString,
            value: GUIDE_SELECTOR
        }
    }
});

M.local_mediaserver.guide = function(config) {
    return new GUIDE(config);
};
